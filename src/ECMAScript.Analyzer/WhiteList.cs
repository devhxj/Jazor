// <auto-generated/>
using System.Collections.Generic;

namespace ECMAScript.Analyzer;

public static class WhiteList
{
    public static readonly HashSet<string> Types = new HashSet<string>
    {
        "void",
        "System.Nullable",
        "System.ValueTuple",
        "System.Array",
        "System.Numerics.BigInteger",
        "bool",
        "object",
        "string"
    };

    public static readonly HashSet<string> Members = new HashSet<string>
    {
        "System.Numerics.BigInteger.BigInteger(int)",
        "System.Numerics.BigInteger.BigInteger(uint)",
        "System.Numerics.BigInteger.BigInteger(long)",
        "System.Numerics.BigInteger.BigInteger(ulong)",
        "System.Numerics.BigInteger.BigInteger(float)",
        "System.Numerics.BigInteger.BigInteger(double)",
        "System.Numerics.BigInteger.BigInteger(System.Decimal)",
        "System.Numerics.BigInteger.BigInteger(byte[])",
        "System.Numerics.BigInteger.BigInteger(byte[])",
        "System.Numerics.BigInteger.BigInteger(System.ReadOnlySpan<byte>, bool, bool)",
        "static System.Numerics.BigInteger.Zero.get",
        "static System.Numerics.BigInteger.One.get",
        "static System.Numerics.BigInteger.MinusOne.get",
        "System.Numerics.BigInteger.IsPowerOfTwo.get",
        "System.Numerics.BigInteger.IsZero.get",
        "System.Numerics.BigInteger.IsOne.get",
        "System.Numerics.BigInteger.IsEven.get",
        "System.Numerics.BigInteger.Sign.get",
        "static System.Numerics.BigInteger.Parse(string)",
        "static System.Numerics.BigInteger.Parse(string, System.Globalization.NumberStyles)",
        "static System.Numerics.BigInteger.Parse(string, System.IFormatProvider)",
        "static System.Numerics.BigInteger.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)",
        "static System.Numerics.BigInteger.TryParse(string, out System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Parse(System.ReadOnlySpan<char>, System.Globalization.NumberStyles, System.IFormatProvider)",
        "static System.Numerics.BigInteger.TryParse(System.ReadOnlySpan<char>, out System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.TryParse(System.ReadOnlySpan<char>, System.Globalization.NumberStyles, System.IFormatProvider, out System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Compare(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "System.Numerics.BigInteger.CompareTo(long)",
        "System.Numerics.BigInteger.CompareTo(ulong)",
        "System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)",
        "System.Numerics.BigInteger.CompareTo(object)",
        "static System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Add(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Divide(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, out System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Log(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Log(System.Numerics.BigInteger, double)",
        "static System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Max(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Min(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger, System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Pow(System.Numerics.BigInteger, int)",
        "override System.Numerics.BigInteger.GetHashCode()",
        "override System.Numerics.BigInteger.Equals(object)",
        "System.Numerics.BigInteger.Equals(long)",
        "System.Numerics.BigInteger.Equals(ulong)",
        "System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)",
        "System.Numerics.BigInteger.ToByteArray()",
        "System.Numerics.BigInteger.ToByteArray(bool, bool)",
        "System.Numerics.BigInteger.TryWriteBytes(System.Span<byte>, out int, bool, bool)",
        "System.Numerics.BigInteger.GetByteCount(bool)",
        "override System.Numerics.BigInteger.ToString()",
        "System.Numerics.BigInteger.ToString(System.IFormatProvider)",
        "System.Numerics.BigInteger.ToString(string)",
        "System.Numerics.BigInteger.ToString(string, System.IFormatProvider)",
        "System.Numerics.BigInteger.TryFormat(System.Span<char>, out int, System.ReadOnlySpan<char>, System.IFormatProvider)",
        "static System.Numerics.BigInteger.operator -(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator &(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator |(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator ^(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator <<(System.Numerics.BigInteger, int)",
        "static System.Numerics.BigInteger.operator >>(System.Numerics.BigInteger, int)",
        "static System.Numerics.BigInteger.operator ~(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator -(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator +(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator ++(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator --(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator +(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator *(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator /(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator %(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator <(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator <(System.Numerics.BigInteger, long)",
        "static System.Numerics.BigInteger.operator <(System.Numerics.BigInteger, ulong)",
        "static System.Numerics.BigInteger.operator <(long, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator <(ulong, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator <=(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator <=(System.Numerics.BigInteger, long)",
        "static System.Numerics.BigInteger.operator <=(System.Numerics.BigInteger, ulong)",
        "static System.Numerics.BigInteger.operator <=(long, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator <=(ulong, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator >(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator >(System.Numerics.BigInteger, long)",
        "static System.Numerics.BigInteger.operator >(System.Numerics.BigInteger, ulong)",
        "static System.Numerics.BigInteger.operator >(long, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator >(ulong, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator >=(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator >=(System.Numerics.BigInteger, long)",
        "static System.Numerics.BigInteger.operator >=(System.Numerics.BigInteger, ulong)",
        "static System.Numerics.BigInteger.operator >=(long, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator >=(ulong, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator ==(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator ==(System.Numerics.BigInteger, long)",
        "static System.Numerics.BigInteger.operator ==(System.Numerics.BigInteger, ulong)",
        "static System.Numerics.BigInteger.operator ==(long, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator ==(ulong, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator !=(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator !=(System.Numerics.BigInteger, long)",
        "static System.Numerics.BigInteger.operator !=(System.Numerics.BigInteger, ulong)",
        "static System.Numerics.BigInteger.operator !=(long, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator !=(ulong, System.Numerics.BigInteger)",
        "System.Numerics.BigInteger.GetBitLength()",
        "static System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.LeadingZeroCount(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.PopCount(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.RotateLeft(System.Numerics.BigInteger, int)",
        "static System.Numerics.BigInteger.RotateRight(System.Numerics.BigInteger, int)",
        "static System.Numerics.BigInteger.TrailingZeroCount(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.IsPow2(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Log2(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.Clamp(System.Numerics.BigInteger, System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.CopySign(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.CreateChecked<TOther>(TOther)",
        "static System.Numerics.BigInteger.CreateSaturating<TOther>(TOther)",
        "static System.Numerics.BigInteger.CreateTruncating<TOther>(TOther)",
        "static System.Numerics.BigInteger.IsEvenInteger(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.IsNegative(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.IsOddInteger(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.IsPositive(System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.MaxMagnitude(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.MinMagnitude(System.Numerics.BigInteger, System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.TryParse(string, System.IFormatProvider, out System.Numerics.BigInteger)",
        "static System.Numerics.BigInteger.operator >>>(System.Numerics.BigInteger, int)",
        "static System.Numerics.BigInteger.Parse(System.ReadOnlySpan<char>, System.IFormatProvider)",
        "static System.Numerics.BigInteger.TryParse(System.ReadOnlySpan<char>, System.IFormatProvider, out System.Numerics.BigInteger)",
        "static readonly bool.TrueString",
        "static readonly bool.FalseString",
        "bool.Boolean()",
        "override bool.GetHashCode()",
        "override bool.ToString()",
        "bool.ToString(System.IFormatProvider)",
        "bool.TryFormat(System.Span<char>, out int)",
        "override bool.Equals(object)",
        "bool.Equals(bool)",
        "bool.CompareTo(object)",
        "bool.CompareTo(bool)",
        "static bool.Parse(string)",
        "static bool.Parse(System.ReadOnlySpan<char>)",
        "static bool.TryParse(string, out bool)",
        "static bool.TryParse(System.ReadOnlySpan<char>, out bool)",
        "bool.GetTypeCode()",
        "object.GetType()",
        "object.Object()",
        "virtual object.ToString()",
        "virtual object.Equals(object)",
        "static object.Equals(object, object)",
        "static object.ReferenceEquals(object, object)",
        "virtual object.GetHashCode()",
        "static readonly string.Empty",
        "static string.Intern(string)",
        "static string.IsInterned(string)",
        "static string.Compare(string, string, bool)",
        "static string.Compare(string, string)",
        "static string.Compare(string, string, System.StringComparison)",
        "static string.Compare(string, string, System.Globalization.CultureInfo, System.Globalization.CompareOptions)",
        "static string.Compare(string, string, bool, System.Globalization.CultureInfo)",
        "static string.Compare(string, int, string, int, int)",
        "static string.Compare(string, int, string, int, int, bool)",
        "static string.Compare(string, int, string, int, int, bool, System.Globalization.CultureInfo)",
        "static string.Compare(string, int, string, int, int, System.Globalization.CultureInfo, System.Globalization.CompareOptions)",
        "static string.Compare(string, int, string, int, int, System.StringComparison)",
        "static string.CompareOrdinal(string, string)",
        "static string.CompareOrdinal(string, int, string, int, int)",
        "string.CompareTo(object)",
        "string.CompareTo(string)",
        "string.EndsWith(string)",
        "string.EndsWith(string, System.StringComparison)",
        "string.EndsWith(string, bool, System.Globalization.CultureInfo)",
        "string.EndsWith(char)",
        "override string.Equals(object)",
        "string.Equals(string)",
        "string.Equals(string, System.StringComparison)",
        "static string.Equals(string, string)",
        "static string.Equals(string, string, System.StringComparison)",
        "static string.operator ==(string, string)",
        "static string.operator !=(string, string)",
        "override string.GetHashCode()",
        "string.GetHashCode(System.StringComparison)",
        "static string.GetHashCode(System.ReadOnlySpan<char>)",
        "static string.GetHashCode(System.ReadOnlySpan<char>, System.StringComparison)",
        "string.StartsWith(string)",
        "string.StartsWith(string, System.StringComparison)",
        "string.StartsWith(string, bool, System.Globalization.CultureInfo)",
        "string.StartsWith(char)",
        "string.String(char[])",
        "string.String(char[], int, int)",
        "string.String(char, int)",
        "string.String(System.ReadOnlySpan<char>)",
        "static string.Create<TState>(int, TState, System.Buffers.SpanAction<char, TState>)",
        "string.Clone()",
        "static string.Copy(string)",
        "string.CopyTo(int, char[], int, int)",
        "string.CopyTo(System.Span<char>)",
        "string.TryCopyTo(System.Span<char>)",
        "string.ToCharArray()",
        "string.ToCharArray(int, int)",
        "static string.IsNullOrEmpty(string)",
        "static string.IsNullOrWhiteSpace(string)",
        "string.GetPinnableReference()",
        "override string.ToString()",
        "string.ToString(System.IFormatProvider)",
        "string.GetEnumerator()",
        "string.EnumerateRunes()",
        "string.GetTypeCode()",
        "string.IsNormalized()",
        "string.IsNormalized(System.Text.NormalizationForm)",
        "string.Normalize()",
        "string.Normalize(System.Text.NormalizationForm)",
        "string.this[int].get",
        "string.Length.get",
        "static string.Concat(object)",
        "static string.Concat(object, object)",
        "static string.Concat(object, object, object)",
        "static string.Concat(params object[])",
        "static string.Concat(params System.ReadOnlySpan<object>)",
        "static string.Concat<T>(System.Collections.Generic.IEnumerable<T>)",
        "static string.Concat(System.Collections.Generic.IEnumerable<string>)",
        "static string.Concat(string, string)",
        "static string.Concat(string, string, string)",
        "static string.Concat(string, string, string, string)",
        "static string.Concat(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)",
        "static string.Concat(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)",
        "static string.Concat(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)",
        "static string.Concat(params string[])",
        "static string.Concat(params System.ReadOnlySpan<string>)",
        "static string.Format(string, object)",
        "static string.Format(string, object, object)",
        "static string.Format(string, object, object, object)",
        "static string.Format(string, params object[])",
        "static string.Format(string, params System.ReadOnlySpan<object>)",
        "static string.Format(System.IFormatProvider, string, object)",
        "static string.Format(System.IFormatProvider, string, object, object)",
        "static string.Format(System.IFormatProvider, string, object, object, object)",
        "static string.Format(System.IFormatProvider, string, params object[])",
        "static string.Format(System.IFormatProvider, string, params System.ReadOnlySpan<object>)",
        "static string.Format<TArg0>(System.IFormatProvider, System.Text.CompositeFormat, TArg0)",
        "static string.Format<TArg0, TArg1>(System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1)",
        "static string.Format<TArg0, TArg1, TArg2>(System.IFormatProvider, System.Text.CompositeFormat, TArg0, TArg1, TArg2)",
        "static string.Format(System.IFormatProvider, System.Text.CompositeFormat, params object[])",
        "static string.Format(System.IFormatProvider, System.Text.CompositeFormat, params System.ReadOnlySpan<object>)",
        "string.Insert(int, string)",
        "static string.Join(char, params string[])",
        "static string.Join(char, params System.ReadOnlySpan<string>)",
        "static string.Join(string, params string[])",
        "static string.Join(string, params System.ReadOnlySpan<string>)",
        "static string.Join(char, string[], int, int)",
        "static string.Join(string, string[], int, int)",
        "static string.Join(string, System.Collections.Generic.IEnumerable<string>)",
        "static string.Join(char, params object[])",
        "static string.Join(char, params System.ReadOnlySpan<object>)",
        "static string.Join(string, params object[])",
        "static string.Join(string, params System.ReadOnlySpan<object>)",
        "static string.Join<T>(char, System.Collections.Generic.IEnumerable<T>)",
        "static string.Join<T>(string, System.Collections.Generic.IEnumerable<T>)",
        "string.PadLeft(int)",
        "string.PadLeft(int, char)",
        "string.PadRight(int)",
        "string.PadRight(int, char)",
        "string.Remove(int, int)",
        "string.Remove(int)",
        "string.Replace(string, string, bool, System.Globalization.CultureInfo)",
        "string.Replace(string, string, System.StringComparison)",
        "string.Replace(char, char)",
        "string.Replace(string, string)",
        "string.ReplaceLineEndings()",
        "string.ReplaceLineEndings(string)",
        "string.Split(char, System.StringSplitOptions)",
        "string.Split(char, int, System.StringSplitOptions)",
        "string.Split(params char[])",
        "string.Split(params System.ReadOnlySpan<char>)",
        "string.Split(char[], int)",
        "string.Split(char[], System.StringSplitOptions)",
        "string.Split(char[], int, System.StringSplitOptions)",
        "string.Split(string, System.StringSplitOptions)",
        "string.Split(string, int, System.StringSplitOptions)",
        "string.Split(string[], System.StringSplitOptions)",
        "string.Split(string[], int, System.StringSplitOptions)",
        "string.Substring(int)",
        "string.Substring(int, int)",
        "string.ToLower()",
        "string.ToLower(System.Globalization.CultureInfo)",
        "string.ToLowerInvariant()",
        "string.ToUpper()",
        "string.ToUpper(System.Globalization.CultureInfo)",
        "string.ToUpperInvariant()",
        "string.Trim()",
        "string.Trim(char)",
        "string.Trim(params char[])",
        "string.Trim(params System.ReadOnlySpan<char>)",
        "string.TrimStart()",
        "string.TrimStart(char)",
        "string.TrimStart(params char[])",
        "string.TrimStart(params System.ReadOnlySpan<char>)",
        "string.TrimEnd()",
        "string.TrimEnd(char)",
        "string.TrimEnd(params char[])",
        "string.TrimEnd(params System.ReadOnlySpan<char>)",
        "string.Contains(string)",
        "string.Contains(string, System.StringComparison)",
        "string.Contains(char)",
        "string.Contains(char, System.StringComparison)",
        "string.IndexOf(char)",
        "string.IndexOf(char, int)",
        "string.IndexOf(char, System.StringComparison)",
        "string.IndexOf(char, int, int)",
        "string.IndexOfAny(char[])",
        "string.IndexOfAny(char[], int)",
        "string.IndexOfAny(char[], int, int)",
        "string.IndexOf(string)",
        "string.IndexOf(string, int)",
        "string.IndexOf(string, int, int)",
        "string.IndexOf(string, System.StringComparison)",
        "string.IndexOf(string, int, System.StringComparison)",
        "string.IndexOf(string, int, int, System.StringComparison)",
        "string.LastIndexOf(char)",
        "string.LastIndexOf(char, int)",
        "string.LastIndexOf(char, int, int)",
        "string.LastIndexOfAny(char[])",
        "string.LastIndexOfAny(char[], int)",
        "string.LastIndexOfAny(char[], int, int)",
        "string.LastIndexOf(string)",
        "string.LastIndexOf(string, int)",
        "string.LastIndexOf(string, int, int)",
        "string.LastIndexOf(string, System.StringComparison)",
        "string.LastIndexOf(string, int, System.StringComparison)",
        "string.LastIndexOf(string, int, int, System.StringComparison)"
    };
}