global using System;
global using System.ComponentModel;
global using System.Collections;
global using System.Collections.Generic;
global using System.Collections.ObjectModel;
global using System.Numerics;
global using System.Collections.Frozen;
global using System.Threading.Tasks;
global using System.Diagnostics.CodeAnalysis;
global using ECMAScript;
global using ECMAScript.CSS;
global using ECMAScript.GPUBufferUsage;
global using ECMAScript.WebAssembly;
global using EventListener = ECMAScript.Either<ECMAScript.EventListenerLiteral, ECMAScript.HandleEventCallback>;
global using NodeFilter = ECMAScript.Either<ECMAScript.NodeFilterLiteral, ECMAScript.AcceptNodeCallback>;
global using XPathNSResolver = ECMAScript.Either<ECMAScript.XPathNSResolverLiteral, ECMAScript.LookupNamespaceURICallback>;
global using ClipboardItemData = ECMAScript.PromiseResult<ECMAScript.Either<string, ECMAScript.Blob>>;
global using ClipboardItems = ECMAScript.ClipboardItem[];
global using CookieList = ECMAScript.CookieListItem[];
global using PasswordCredentialInit = ECMAScript.Either<ECMAScript.PasswordCredentialData, ECMAScript.HTMLFormElement>;
global using CSSStringSource = ECMAScript.Either<string, ECMAScript.ReadableStream>;
global using CSSToken = ECMAScript.Either<string, ECMAScript.CSS.CSSStyleValue, ECMAScript.CSS.CSSParserValue>;
global using CSSUnparsedSegment = ECMAScript.Either<string, ECMAScript.CSS.CSSVariableReferenceValue>;
global using CSSKeywordish = ECMAScript.Either<string, ECMAScript.CSS.CSSKeywordValue>;
global using CSSNumberish = ECMAScript.Either<double, ECMAScript.CSS.CSSNumericValue>;
global using CSSPerspectiveValue = ECMAScript.Either<ECMAScript.CSS.CSSNumericValue, ECMAScript.Either<string, ECMAScript.CSS.CSSKeywordValue>/*CSSKeywordish*/>;
global using CSSColorRGBComp = ECMAScript.Either<ECMAScript.Either<double, ECMAScript.CSS.CSSNumericValue>/*CSSNumberish*/, ECMAScript.Either<string, ECMAScript.CSS.CSSKeywordValue>/*CSSKeywordish*/>;
global using CSSColorPercent = ECMAScript.Either<ECMAScript.Either<double, ECMAScript.CSS.CSSNumericValue>/*CSSNumberish*/, ECMAScript.Either<string, ECMAScript.CSS.CSSKeywordValue>/*CSSKeywordish*/>;
global using CSSColorNumber = ECMAScript.Either<ECMAScript.Either<double, ECMAScript.CSS.CSSNumericValue>/*CSSNumberish*/, ECMAScript.Either<string, ECMAScript.CSS.CSSKeywordValue>/*CSSKeywordish*/>;
global using CSSColorAngle = ECMAScript.Either<ECMAScript.Either<double, ECMAScript.CSS.CSSNumericValue>/*CSSNumberish*/, ECMAScript.Either<string, ECMAScript.CSS.CSSKeywordValue>/*CSSKeywordish*/>;
global using GeometryNode = ECMAScript.Either<ECMAScript.Text, ECMAScript.Element, ECMAScript.CSSPseudoElement, ECMAScript.Document>;
global using GLuint64EXT = ulong;
global using UrnOrConfig = ECMAScript.Either<string, ECMAScript.FencedFrameConfig>;
global using ReportEventType = ECMAScript.Either<ECMAScript.FenceEvent, string>;
global using HeadersInit = ECMAScript.Either<byte[][][], System.Collections.Generic.Dictionary<byte[], byte[]>>;
global using XMLHttpRequestBodyInit = ECMAScript.Either<ECMAScript.Blob, ECMAScript.IBufferSource, ECMAScript.FormData, ECMAScript.URLSearchParams, string>;
global using BodyInit = ECMAScript.Either<ECMAScript.ReadableStream, ECMAScript.Either<ECMAScript.Blob, ECMAScript.IBufferSource, ECMAScript.FormData, ECMAScript.URLSearchParams, string>/*XMLHttpRequestBodyInit*/>;
global using RequestInfo = ECMAScript.Either<ECMAScript.Request, string>;
global using StartInDirectory = ECMAScript.Either<ECMAScript.WellKnownDirectory, ECMAScript.FileSystemHandle>;
global using BlobPart = ECMAScript.Either<ECMAScript.IBufferSource, ECMAScript.Blob, string>;
global using FileSystemWriteChunkType = ECMAScript.Either<ECMAScript.IBufferSource, ECMAScript.Blob, string, ECMAScript.WriteParams>;
global using DOMHighResTimeStamp = double;
global using EpochTimeStamp = ulong;
global using HTMLOrSVGScriptElement = ECMAScript.Either<ECMAScript.HTMLScriptElement, ECMAScript.SVGScriptElement>;
global using MediaProvider = ECMAScript.Either<ECMAScript.MediaStream, ECMAScript.MediaSource, ECMAScript.Blob>;
global using RenderingContext = ECMAScript.Either<ECMAScript.CanvasRenderingContext2D, ECMAScript.ImageBitmapRenderingContext, ECMAScript.WebGLRenderingContext, ECMAScript.WebGL2RenderingContext, ECMAScript.GPUBufferUsage.GPUCanvasContext>;
global using HTMLOrSVGImageElement = ECMAScript.Either<ECMAScript.HTMLImageElement, ECMAScript.SVGImageElement>;
global using CanvasImageSource = ECMAScript.Either<ECMAScript.Either<ECMAScript.HTMLImageElement, ECMAScript.SVGImageElement>/*HTMLOrSVGImageElement*/, ECMAScript.HTMLVideoElement, ECMAScript.HTMLCanvasElement, ECMAScript.ImageBitmap, ECMAScript.OffscreenCanvas, ECMAScript.VideoFrame>;
global using OffscreenRenderingContext = ECMAScript.Either<ECMAScript.OffscreenCanvasRenderingContext2D, ECMAScript.ImageBitmapRenderingContext, ECMAScript.WebGLRenderingContext, ECMAScript.WebGL2RenderingContext, ECMAScript.GPUBufferUsage.GPUCanvasContext>;
global using EventHandler = ECMAScript.EventHandlerNonNull;
global using OnErrorEventHandler = ECMAScript.OnErrorEventHandlerNonNull;
global using OnBeforeUnloadEventHandler = ECMAScript.OnBeforeUnloadEventHandlerNonNull;
global using TimerHandler = ECMAScript.Either<string, System.Delegate, ECMAScript.TrustedScript>;
global using ImageDataArray = ECMAScript.Either<ECMAScript.Uint8ClampedArray, ECMAScript.Float16Array>;
global using ImageBitmapSource = ECMAScript.Either<ECMAScript.Either<ECMAScript.Either<ECMAScript.HTMLImageElement, ECMAScript.SVGImageElement>/*HTMLOrSVGImageElement*/, ECMAScript.HTMLVideoElement, ECMAScript.HTMLCanvasElement, ECMAScript.ImageBitmap, ECMAScript.OffscreenCanvas, ECMAScript.VideoFrame>/*CanvasImageSource*/, ECMAScript.Blob, ECMAScript.ImageData>;
global using MessageEventSource = ECMAScript.Either<ECMAScript.WindowProxy, ECMAScript.MessagePort, ECMAScript.ServiceWorker>;
global using ConstrainPoint2D = ECMAScript.Either<ECMAScript.Point2D[], ECMAScript.ConstrainPoint2DParameters>;
global using ProfilerResource = string;
global using ConstrainULong = ECMAScript.Either<uint, ECMAScript.ConstrainULongRange>;
global using ConstrainDouble = ECMAScript.Either<double, ECMAScript.ConstrainDoubleRange>;
global using ConstrainBoolean = ECMAScript.Either<bool, ECMAScript.ConstrainBooleanParameters>;
global using ConstrainDOMString = ECMAScript.Either<string, string[], ECMAScript.ConstrainDOMStringParameters>;
global using ConstrainBooleanOrDOMString = ECMAScript.Either<bool, string, ECMAScript.ConstrainBooleanOrDOMStringParameters>;
global using Megabit = double;
global using Millisecond = ulong;
global using ObserverUnion = ECMAScript.Either<ECMAScript.ObservableSubscriptionCallback, ECMAScript.SubscriptionObserver>;
global using ObservableInspectorUnion = ECMAScript.Either<ECMAScript.ObservableSubscriptionCallback, ECMAScript.ObservableInspector>;
global using RotationMatrixType = ECMAScript.Either<ECMAScript.Float32Array, ECMAScript.Float64Array, ECMAScript.DOMMatrix>;
global using PerformanceEntryList = ECMAScript.PerformanceEntry[];
global using PushMessageDataInit = ECMAScript.Either<ECMAScript.IBufferSource, string>;
global using ReportList = ECMAScript.Report[];
global using SanitizerElement = ECMAScript.Either<string, ECMAScript.SanitizerElementNamespace>;
global using SanitizerElementWithAttributes = ECMAScript.Either<string, ECMAScript.SanitizerElementNamespaceWithAttributes>;
global using SanitizerAttribute = ECMAScript.Either<string, ECMAScript.SanitizerAttributeNamespace>;
global using RouterSource = ECMAScript.Either<ECMAScript.RouterSourceDict, ECMAScript.RouterSourceEnum>;
global using SharedStorageResponse = ECMAScript.Either<string, ECMAScript.FencedFrameConfig>;
global using ReadableStreamReader = ECMAScript.Either<ECMAScript.ReadableStreamDefaultReader, ECMAScript.ReadableStreamBYOBReader>;
global using ReadableStreamController = ECMAScript.Either<ECMAScript.ReadableStreamDefaultController, ECMAScript.ReadableByteStreamController>;
global using TrustedType = ECMAScript.Either<ECMAScript.TrustedHTML, ECMAScript.TrustedScript, ECMAScript.TrustedScriptURL>;
global using PreviousWinElement = ECMAScript.Either<long, ECMAScript.AuctionAd>;
global using PreviousWin = ECMAScript.Either<long, ECMAScript.AuctionAd>/*PreviousWinElement*/[];
global using URLPatternInput = ECMAScript.Either<string, ECMAScript.URLPatternInit>;
global using URLPatternCompatible = ECMAScript.Either<string, ECMAScript.URLPatternInit, ECMAScript.URLPattern>;
global using VibratePattern = ECMAScript.Either<uint, uint[]>;
global using UUID = string;
global using BluetoothServiceUUID = ECMAScript.Either<string, uint>;
global using BluetoothCharacteristicUUID = ECMAScript.Either<string, uint>;
global using BluetoothDescriptorUUID = ECMAScript.Either<string, uint>;
global using NDEFMessageSource = ECMAScript.Either<string, ECMAScript.IBufferSource, ECMAScript.NDEFMessageInit>;
global using Base64URLString = string;
global using PublicKeyCredentialJSON = object;
global using PublicKeyCredentialClientCapabilities = System.Collections.Generic.Dictionary<string, bool>;
global using COSEAlgorithmIdentifier = int;
global using ImageBufferSource = ECMAScript.Either<ECMAScript.IAllowSharedBufferSource, ECMAScript.ReadableStream>;
global using AlgorithmIdentifier = ECMAScript.Either<object, string>;
global using HashAlgorithmIdentifier = ECMAScript.Either<object, string>/*AlgorithmIdentifier*/;
global using BigInteger = ECMAScript.Uint8Array;
global using NamedCurve = string;
global using GLenum = uint;
global using GLboolean = bool;
global using GLbitfield = uint;
global using GLbyte = sbyte;
global using GLshort = short;
global using GLint = int;
global using GLsizei = int;
global using GLintptr = long;
global using GLsizeiptr = long;
global using GLubyte = byte;
global using GLushort = ushort;
global using GLuint = uint;
global using GLfloat = float;
global using GLclampf = float;
global using TexImageSource = ECMAScript.Either<ECMAScript.ImageBitmap, ECMAScript.ImageData, ECMAScript.HTMLImageElement, ECMAScript.HTMLCanvasElement, ECMAScript.HTMLVideoElement, ECMAScript.OffscreenCanvas, ECMAScript.VideoFrame>;
global using Float32List = ECMAScript.Either<ECMAScript.Float32Array, float/*GLfloat*/[]>;
global using Int32List = ECMAScript.Either<ECMAScript.Int32Array, int/*GLint*/[]>;
global using GLint64 = long;
global using GLuint64 = ulong;
global using Uint32List = ECMAScript.Either<ECMAScript.Uint32Array, uint/*GLuint*/[]>;
global using GPUBufferUsageFlags = uint;
global using GPUMapModeFlags = uint;
global using GPUTextureUsageFlags = uint;
global using GPUShaderStageFlags = uint;
global using GPUBindingResource = ECMAScript.Either<ECMAScript.GPUBufferUsage.GPUSampler, ECMAScript.GPUBufferUsage.GPUTextureView, ECMAScript.GPUBufferUsage.GPUBuffer, ECMAScript.GPUBufferUsage.GPUBufferBinding, ECMAScript.GPUBufferUsage.GPUExternalTexture>;
global using GPUPipelineConstantValue = double;
global using GPUColorWriteFlags = uint;
global using GPUCopyExternalImageSource = ECMAScript.Either<ECMAScript.ImageBitmap, ECMAScript.ImageData, ECMAScript.HTMLImageElement, ECMAScript.HTMLVideoElement, ECMAScript.VideoFrame, ECMAScript.HTMLCanvasElement, ECMAScript.OffscreenCanvas>;
global using GPUBufferDynamicOffset = uint;
global using GPUStencilValue = uint;
global using GPUSampleMask = uint;
global using GPUDepthBias = int;
global using GPUSize64 = ulong;
global using GPUIntegerCoordinate = uint;
global using GPUIndex32 = uint;
global using GPUSize32 = uint;
global using GPUSignedOffset32 = int;
global using GPUSize64Out = ulong;
global using GPUIntegerCoordinateOut = uint;
global using GPUSize32Out = uint;
global using GPUFlagsConstant = uint;
global using GPUColor = ECMAScript.Either<double[], ECMAScript.GPUBufferUsage.GPUColorDict>;
global using GPUOrigin2D = ECMAScript.Either<uint/*GPUIntegerCoordinate*/[], ECMAScript.GPUBufferUsage.GPUOrigin2DDict>;
global using GPUOrigin3D = ECMAScript.Either<uint/*GPUIntegerCoordinate*/[], ECMAScript.GPUBufferUsage.GPUOrigin3DDict>;
global using GPUExtent3D = ECMAScript.Either<uint/*GPUIntegerCoordinate*/[], ECMAScript.GPUBufferUsage.GPUExtent3DDict>;
global using ArrayBufferView = ECMAScript.Either<ECMAScript.Int8Array, ECMAScript.Int16Array, ECMAScript.Int32Array, ECMAScript.Uint8Array, ECMAScript.Uint16Array, ECMAScript.Uint32Array, ECMAScript.Uint8ClampedArray, ECMAScript.BigInt64Array, ECMAScript.BigUint64Array, ECMAScript.Float16Array, ECMAScript.Float32Array, ECMAScript.Float64Array, ECMAScript.DataView>;
global using BufferSource = ECMAScript.Either<ECMAScript.IArrayBufferView, ECMAScript.ArrayBuffer>;
global using AllowSharedBufferSource = ECMAScript.Either<ECMAScript.ArrayBuffer, ECMAScript.SharedArrayBuffer, ECMAScript.IArrayBufferView>;
global using MLNamedTensors = System.Collections.Generic.Dictionary<string, ECMAScript.MLTensor>;
global using MLDataTypeList = ECMAScript.MLOperandDataType[];
global using MLNumber = ECMAScript.Either<ECMAScript.Uint8Array/*BigInteger*/, double>;
global using MLNamedOperands = System.Collections.Generic.Dictionary<string, ECMAScript.MLOperand>;
global using RTCRtpTransform = ECMAScript.Either<ECMAScript.SFrameTransform, ECMAScript.RTCRtpScriptTransform>;
global using SmallCryptoKeyID = ulong;
global using CryptoKeyID = ECMAScript.Either<ulong/*SmallCryptoKeyID*/, ECMAScript.Uint8Array/*BigInteger*/>;
global using LineAndPositionSetting = ECMAScript.Either<double, ECMAScript.AutoKeyword>;
global using XRWebGLRenderingContext = ECMAScript.Either<ECMAScript.WebGLRenderingContext, ECMAScript.WebGL2RenderingContext>;
global using FormDataEntryValue = ECMAScript.Either<ECMAScript.File, string>;